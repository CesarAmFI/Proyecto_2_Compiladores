revisar:
    - tipo:
        - si es flotante (guardar en $f0, $f1, $f2, etc....)
        - si es double (guardar en $f0, $f2, $f4, etc....)
        - si es otro (guardar en $f)
    - valor:
        - si es indirecto (variable como $suma, constante como $float1)
        - si es inmediato (constante como 5)
    - scope:
        - si es local (buscar en tabla del contexto actual)
        - si es global (buscar en tabla global)
    - complejidad:
        - si es atributo (buscar con nombre variable_atributo en tabla global)
        - si es simple (buscar con nombre tal cual en tabla local y luego global)


IF:
    three dir:
        - if t0 goto LABEL
    mips:
        - lw/li/l.d/l.s $r0/$f0, float1/5/$sp(4)/a_b
        - bne $r0/$f0, $zero, LABEL

GOTO
    three dir:
        - goto LABEL
    mips:
        - j LABEL

LABEL:
    three dir:
        - LABEL: 
    mips:
        - LABEL:

ASSIGN:
    three dir:
        - a = b
        - a[0] = b
        - a = b[0]
        - a[0] = b[0]
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - sw float2/$sp(8)/a_c $r0/$f0

SCAN:
    three dir:
        - scan a
    mips:
        - li $v0, 5/6/7/8/12
        - syscall
        - sw float1/$sp(4)/a_b $v0/$f0
    
PRINT:
    three dir:
        - print k
        - print string0
    mips:
        - li $v0, 1/2/3/4/11
        - la $a0/$f12 string1/float1/$sp(4)/a_b
        - syscall

PARAM:
    three dir:
        - param n1
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b

CALL:
    three dir:
        - t = call FUNC, 5
    mips:
        WILL NEED PARAM STACK, TABLE MAP
        - addi $sp, $sp, -size - 4
        - sw $sp(size), $ra 
        - sw $t1/$f1, $sp(pos(param_1)) <-------------------- $t1/$f1
        - ..........
        - sw $tn/$fn, $sp(pos(param_n)) <-------------------- $tn/$fn
        - jal FUNC
        - lw $r0/$f0 $sp(pos(return_1))
        - ..........
        - lw $r0/$f0 $sp(pos(return_n)) 
        - sw $sp(size) $ra
        - addi $sp, $sp, size + 4

CALL VALUE:
    three dir:
        - call value t
        - call value t[0]
    mips:  
        - sw $rk/$fk $sp(pos(t))

RETURN_VALUE:
    three dir:
        - return a
    mips:
        - lw $r0/$f0 float1/5/$sp(4)/a_b
        - sw $sp(pos(ret)) $r0/$f0
        - jr $ra

RETURN_VOID:
    three dir:
        - return
    mips:
        - jr $ra

CAST_TO_CHAR:
    three dir:
        - c = (char) i
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - [cvt.w.s/d $r0 $f0] ? (only if i is float/double)
        - andi $r1, $r0, 0x000000FF 
        - sw $sp(4)/a_b $r1

CAST_TO_INTEGER:
    three dir:
        - i = (int) f
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - [cvt.w.s/d $r0 $f0] ? (only if i is float/double)
        - sw $sp(4)/a_b $r0

CAST_TO_FLOAT:
    three dir:
        - f = (float) i
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - cvt.s.w/d $f2 $r0/$f0
        - sw $sp(4)/a_b $f2

CAST_TO_DOUBLE:
    three dir:
        - d = (double) i
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - cvt.d.w/s $f2 $r0/$f0
        - sw $sp(4)/a_b $f2

DISJOIN:
    three dir:
        - a = b || c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c
        - or $r2/$f4, $r0/$f0, $r1/$f2
        - slt $r3/$f6, $zero, $r2/$f4
        - sw float3/$sp(4)/a_b $r3/$f6

CONJOIN:
    three dir:
        - a = b && c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c
        - and $r2/$f4, $r0/$f0, $r1/$f2
        - slt $r3/$f6, $zero, $r2/$f4
        - sw float3/$sp(4)/a_b $r3/$f6

EQUAL:
    three dir:
        - a = b == c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - xor $r2/$f4, $r0/$f0, $r1/$f2        
        - seq $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

NOT_EQUAL:
    three dir:
        - a = b != c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - xor $r2/$f4, $r0/$f0, $r1/$f2        
        - sne $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

LESS:
    three dir:
        - a = b < c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - sub $r2, $r0/$f0, $r1/$f2    
        - slt $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

GREATER:
    three dir:
        - a = b > c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - sub $r2/$f4, $r0/$f0, $r1/$f2         
        - sgt $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

LESS_EQUAL:
    three dir:
        - a = b < c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - sub $r2/$f4, $r0/$f0, $r1/$f2        
        - sle $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

GREATER_EQUAL:
    three dir:
        - a = b > c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - sub $r2/$f4, $r0/$f0, $r1/$f2        
        - sge $r3/$f6, $r2/$f4, $zero             
        - sw float3/$sp(4)/a_b $r3/$f6

ADD:
    three dir:
        - a = b + c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - add $r2/$f4, $r0/$f0, $r1/$f2        
        - sw float3/$sp(4)/a_b $r2/$f4

SUBSTRACT:
    three dir:
        - a = b - c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - sub $r2/$f4, $r0/$f0, $r1/$f2        
        - sw float3/$sp(4)/a_b $r2/$f4

MULTIPLY:
    three dir:
        - a = b * c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - mul $r2/f4, $r0/$f0, $r1/$f2 
        - sw float3/$sp(4)/a_b $r2/$f4

DIVIDE:
    three dir:
        - a = b / c
    mips:
        - lw/li/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b 
        - lw/li/l.d/l.s $r1/$f2 float2/7/$sp(8)/a_c 
        - div $r2/f4, $r0/$f0, $r1/$f2        
        - sw float3/$sp(4)/a_b $r2/$f4

NEGATE:
    three dir:
        - a = !b
    mips:
        - lw/li/l.d/l.s/l.d/l.s $r0/$f0 float1/5/$sp(4)/a_b  
        - seq $r1/$f2, $r0/$f0, $zero        
        - sw float3/$sp(4)/a_b $r1/$f2
